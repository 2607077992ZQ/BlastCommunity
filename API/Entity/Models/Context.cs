// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

using Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal;

namespace Entity.Models;

public partial class Context : DbContext
{
    public Context()
    {
    }

    public Context(DbContextOptions<Context> options)
        : base(options)
    {
    }

    public virtual DbSet<groupinfo> groupinfos { get; set; }

    public virtual DbSet<grouping> groupings { get; set; }

    public virtual DbSet<user> users { get; set; }

    public virtual DbSet<workorder> workorders { get; set; }

    //protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //    => optionsBuilder.UseMySql("server=127.0.0.1;database=blastcommunity;uid=root;pwd=Aa123456", Microsoft.EntityFrameworkCore.ServerVersion.Parse("5.7.44-mysql"));
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        var config = System.IO.File.ReadAllText("config.json");
        System.Text.Json.JsonDocument json = System.Text.Json.JsonDocument.Parse(config);
        System.Text.Json.JsonElement database = json.RootElement.GetProperty("database");

        string server = database.GetProperty("server").GetString();
        int port = database.GetProperty("port").GetInt32();
        string dataname = database.GetProperty("dataname").GetString();
        string user = database.GetProperty("user").GetString();
        string password = database.GetProperty("password").GetString();
        string ssl = database.GetProperty("ssl").GetString();
        string charset = database.GetProperty("charset").GetString();
        string connectionString = $"server={server};port={port};database={dataname};uid={user};pwd={password};charset={charset};SslMode={ssl};";

        //Console.WriteLine(connectionString);

        optionsBuilder.UseMySql(connectionString, Microsoft.EntityFrameworkCore.ServerVersion.AutoDetect(connectionString));
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_general_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<groupinfo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("groupinfo");

            entity.HasIndex(e => e.GId, "GId");

            entity.HasIndex(e => e.creator, "creator");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnType("int(11)");
            entity.Property(e => e.GId).HasColumnType("int(11)");
            entity.Property(e => e.ItemName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Item_Remarks).HasMaxLength(255);
            entity.Property(e => e.complaint).HasColumnType("int(11)");
            entity.Property(e => e.createTime).HasColumnType("datetime");
            entity.Property(e => e.creator).HasColumnType("int(11)");
            entity.Property(e => e.delete).HasColumnType("int(11)");
            entity.Property(e => e.sort)
                .IsRequired()
                .HasMaxLength(1)
                .IsFixedLength();

            entity.HasOne(d => d.GIdNavigation).WithMany(p => p.groupinfos)
                .HasForeignKey(d => d.GId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("groupinfo_ibfk_1");

            entity.HasOne(d => d.creatorNavigation).WithMany(p => p.groupinfos)
                .HasForeignKey(d => d.creator)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("groupinfo_ibfk_2");
        });

        modelBuilder.Entity<grouping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("grouping");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnType("int(11)");
            entity.Property(e => e.ItemName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.createTime).HasColumnType("datetime");
            entity.Property(e => e.sort)
                .IsRequired()
                .HasMaxLength(1)
                .IsFixedLength();
            entity.Property(e => e.statistics).HasColumnType("int(11)");
        });

        modelBuilder.Entity<user>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnType("int(11)");
            entity.Property(e => e.UID)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.banned).HasColumnType("int(1)");
            entity.Property(e => e.banned_remarks).HasColumnType("text");
            entity.Property(e => e.createTime).HasColumnType("datetime");
            entity.Property(e => e.enable).HasColumnType("int(1)");
            entity.Property(e => e.loginTime).HasColumnType("datetime");
            entity.Property(e => e.pwd)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.pwd_history).HasMaxLength(255);
            entity.Property(e => e.role).HasColumnType("int(11)");
            entity.Property(e => e.username)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<workorder>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("workorder");

            entity.HasIndex(e => e.ItemID, "ItemID");

            entity.HasIndex(e => e.creator, "creator");

            entity.HasIndex(e => e.violation, "violation");

            entity.Property(e => e.ItemID).HasColumnType("int(11)");
            entity.Property(e => e.createTime).HasColumnType("datetime");
            entity.Property(e => e.creator).HasColumnType("int(11)");
            entity.Property(e => e.existence).HasColumnType("int(11)");
            entity.Property(e => e.remarks).HasMaxLength(255);
            entity.Property(e => e.violation).HasColumnType("int(11)");

            entity.HasOne(d => d.Item).WithMany()
                .HasForeignKey(d => d.ItemID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("workorder_ibfk_1");

            entity.HasOne(d => d.creatorNavigation).WithMany()
                .HasForeignKey(d => d.creator)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("workorder_ibfk_2");

            entity.HasOne(d => d.violationNavigation).WithMany()
                .HasForeignKey(d => d.violation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("workorder_ibfk_3");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}